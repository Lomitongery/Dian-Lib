当下难点：
动态的座位分配
使用链表
手写结构体
typedef struct Node {
    int data;          // 数据域（存储整数）
    struct Node* next; // 指针域（指向后续节点，初始为NULL）
} Node;

简化：无法进行单个座位的添加 改为对行和列的添加
这里有一个问题 这是对某一天 某一层做的标记 具有特异性

要支持动态调整，需要用指针数组替代静态数组，并记录当前座位的实际尺寸（层数、每行的行数、每行列数）。
新结构定义如下：
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// 全局常量：保留7天的时间维度（无需动态调整）
#define DAYS 7

// 动态座位结构体：支持层、行、列的添加/删减
typedef struct {
    int floor_cnt;       // 当前实际层数（如5层、6层）
    int* row_cnt;        // 每行的实际行数：row_cnt[层] = 该层的总行数（如4行、5行）
    int** col_cnt;       // 每行列数：col_cnt[层][行] = 该行的总列数（如4列、6列）
    char*** seat;        // 动态三维指针：seat[层][行][列]，存储座位状态（'0'=空闲，用户首字符=已预约）
} Library;

// 全局变量：存储7天的座位数据
Library Dian[DAYS];

/**
 * @brief 初始化某一天的动态座位
 * @param lib：指向要初始化的Library结构体
 * @param init_floor：初始层数（如5）
 * @param init_row_per_floor：每层初始行数（如4）
 * @param init_col_per_row：每行初始列数（如4）
 * @return true=初始化成功，false=失败（内存分配失败）
 */
bool init_library(Library* lib, int init_floor, int init_row_per_floor, int init_col_per_row) {
    // 1. 初始化层数和“每层行数”数组（row_cnt）
    lib->floor_cnt = init_floor;
    lib->row_cnt = (int*)malloc(lib->floor_cnt * sizeof(int));


    // 2. 初始化“每行列数”数组（col_cnt）：先分配“层”维度
    lib->col_cnt = (int**)malloc(lib->floor_cnt * sizeof(int*));


    // 3. 初始化三维座位指针（seat）：先分配“层”维度
    lib->seat = (char***)malloc(lib->floor_cnt * sizeof(char**));

    // 4. 为每一层分配“行”和“列”的内存，并初始化座位为空闲（'0'）
    for (int f = 0; f < lib->floor_cnt; f++) {
        // 4.1 记录当前层的行数（如4行）
        lib->row_cnt[f] = init_row_per_floor;

        // 4.2 为当前层分配“每行列数”的“行”维度（col_cnt[f]）
        lib->col_cnt[f] = (int*)malloc(lib->row_cnt[f] * sizeof(int));


        // 4.3 为当前层分配“座位”的“行”维度（seat[f]）
        lib->seat[f] = (char**)malloc(lib->row_cnt[f] * sizeof(char*));


        // 4.4 为当前层的每一行分配“列”内存，并初始化为'0'（空闲）
        for (int r = 0; r < lib->row_cnt[f]; r++) {
            // 记录当前行的列数（如4列）
            lib->col_cnt[f][r] = init_col_per_row;
            // 分配列内存：calloc会自动初始化为0，这里手动改为字符'0'
            lib->seat[f][r] = (char*)calloc(lib->col_cnt[f][r], sizeof(char));

            // 确保座位初始为'0'（空闲）
            memset(lib->seat[f][r], '0', lib->col_cnt[f][r] * sizeof(char));
        }
    }

    printf("座位初始化成功！初始配置：%d层 × 每层%d行 × 每行%d列\n",
           init_floor, init_row_per_floor, init_col_per_row);
    return true;
}